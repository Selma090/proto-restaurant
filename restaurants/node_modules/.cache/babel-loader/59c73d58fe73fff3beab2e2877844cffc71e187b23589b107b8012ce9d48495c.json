{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\salma\\\\Documents\\\\Frontend\\\\restaurants\\\\src\\\\DeliveryAvailability.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport geolib from 'geolib'; // For distance calculation\n\n// Sample data for restaurants\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst restaurants = [{\n  name: 'Restaurant A',\n  latitude: 40.7128,\n  longitude: -74.0060\n}, {\n  name: 'Restaurant B',\n  latitude: 34.0522,\n  longitude: -118.2437\n}\n// Add more restaurant data as needed\n];\n\n// Function to calculate distance between two coordinates\nconst calculateDistance = (userCoords, restaurantCoords) => {\n  return geolib.getDistance(userCoords, restaurantCoords);\n};\nfunction Formulaire() {\n  _s();\n  const [formData, setFormData] = useState({\n    restaurantName: '',\n    cuisineType: '',\n    address: '',\n    phoneNumber: '',\n    email: '',\n    openingHours: '',\n    deliveryAreas: ''\n  });\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    // Logic to submit data to backend\n    console.log(formData);\n    // Reset form after submission\n    setFormData({\n      restaurantName: '',\n      cuisineType: '',\n      address: '',\n      phoneNumber: '',\n      email: '',\n      openingHours: '',\n      deliveryAreas: ''\n    });\n  };\n\n  // Function to determine delivery availability\n  const checkDeliveryAvailability = userLocation => {\n    // Iterate over restaurants and calculate distance from user location\n    restaurants.forEach(restaurant => {\n      const distance = calculateDistance(userLocation, {\n        latitude: restaurant.latitude,\n        longitude: restaurant.longitude\n      });\n      // Determine delivery availability based on distance\n      if (distance < 5000) {\n        // Example: Delivery range is 5km\n        console.log(`${restaurant.name} is within delivery range.`);\n      } else {\n        console.log(`${restaurant.name} is outside delivery range.`);\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-md mx-auto p-6 bg-gray-100 rounded-lg shadow-md\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Enter Commercial Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"block mb-1\",\n          children: \"Address for Delivery Availability Check\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"address\",\n          value: formData.address,\n          onChange: handleChange,\n          className: \"w-full border rounded px-3 py-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\",\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => checkDeliveryAvailability(formData.address),\n      children: \"Check Delivery Availability\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(Formulaire, \"01ekAyBGK4pdKRigvQPlI8ZfRmY=\");\n_c = Formulaire;\nexport default Formulaire;\nvar _c;\n$RefreshReg$(_c, \"Formulaire\");","map":{"version":3,"names":["React","useState","geolib","jsxDEV","_jsxDEV","restaurants","name","latitude","longitude","calculateDistance","userCoords","restaurantCoords","getDistance","Formulaire","_s","formData","setFormData","restaurantName","cuisineType","address","phoneNumber","email","openingHours","deliveryAreas","handleChange","e","value","target","handleSubmit","preventDefault","console","log","checkDeliveryAvailability","userLocation","forEach","restaurant","distance","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Users/salma/Documents/Frontend/restaurants/src/DeliveryAvailability.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport geolib from 'geolib'; // For distance calculation\r\n\r\n// Sample data for restaurants\r\nconst restaurants = [\r\n  { name: 'Restaurant A', latitude: 40.7128, longitude: -74.0060 },\r\n  { name: 'Restaurant B', latitude: 34.0522, longitude: -118.2437 },\r\n  // Add more restaurant data as needed\r\n];\r\n\r\n// Function to calculate distance between two coordinates\r\nconst calculateDistance = (userCoords, restaurantCoords) => {\r\n  return geolib.getDistance(userCoords, restaurantCoords);\r\n};\r\n\r\nfunction Formulaire() {\r\n  const [formData, setFormData] = useState({\r\n    restaurantName: '',\r\n    cuisineType: '',\r\n    address: '',\r\n    phoneNumber: '',\r\n    email: '',\r\n    openingHours: '',\r\n    deliveryAreas: '',\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({\r\n      ...formData,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Logic to submit data to backend\r\n    console.log(formData);\r\n    // Reset form after submission\r\n    setFormData({\r\n      restaurantName: '',\r\n      cuisineType: '',\r\n      address: '',\r\n      phoneNumber: '',\r\n      email: '',\r\n      openingHours: '',\r\n      deliveryAreas: '',\r\n    });\r\n  };\r\n\r\n  // Function to determine delivery availability\r\n  const checkDeliveryAvailability = (userLocation) => {\r\n    // Iterate over restaurants and calculate distance from user location\r\n    restaurants.forEach((restaurant) => {\r\n      const distance = calculateDistance(userLocation, { latitude: restaurant.latitude, longitude: restaurant.longitude });\r\n      // Determine delivery availability based on distance\r\n      if (distance < 5000) { // Example: Delivery range is 5km\r\n        console.log(`${restaurant.name} is within delivery range.`);\r\n      } else {\r\n        console.log(`${restaurant.name} is outside delivery range.`);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-md mx-auto p-6 bg-gray-100 rounded-lg shadow-md\">\r\n      <h2 className=\"text-2xl font-bold mb-4\">Enter Commercial Data</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        {/* Input fields for commercial data */}\r\n        {/* Assume user location input for simplicity */}\r\n        {/* Use geolocation for actual implementation */}\r\n        <div className=\"mb-4\">\r\n          <label className=\"block mb-1\">Address for Delivery Availability Check</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"address\"\r\n            value={formData.address}\r\n            onChange={handleChange}\r\n            className=\"w-full border rounded px-3 py-2\"\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\">Save</button>\r\n      </form>\r\n      {/* Button to trigger delivery availability check */}\r\n      <button onClick={() => checkDeliveryAvailability(formData.address)}>Check Delivery Availability</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Formulaire;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}