{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\salma\\\\Documents\\\\Frontend\\\\restaurants\\\\src\\\\DeliveryAvailability.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DeliveryAvailability() {\n  _s();\n  const [address, setAddress] = useState('');\n  const [deliveryAvailable, setDeliveryAvailable] = useState(null);\n  const checkDeliveryAvailability = () => {\n    // Here you would implement your logic to check if delivery is available\n    // based on the address entered by the user\n    // For now, let's assume delivery is available if the address is not empty\n    const isDeliveryAvailable = address.trim() !== '';\n    setDeliveryAvailable(isDeliveryAvailable);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Check Delivery Availability\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: address,\n      onChange: e => setAddress(e.target.value),\n      placeholder: \"Enter your address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: checkDeliveryAvailability,\n      children: \"Check Delivery\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), deliveryAvailable !== null && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Delivery \", deliveryAvailable ? 'is available' : 'is not available', \" to \", address, \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n}\n_s(DeliveryAvailability, \"aJYkroIMOlE7COSBpSkUfP5Wydg=\");\n_c = DeliveryAvailability;\nexport default DeliveryAvailability;\nvar _c;\n$RefreshReg$(_c, \"DeliveryAvailability\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DeliveryAvailability","_s","address","setAddress","deliveryAvailable","setDeliveryAvailable","checkDeliveryAvailability","isDeliveryAvailable","trim","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/salma/Documents/Frontend/restaurants/src/DeliveryAvailability.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction DeliveryAvailability() {\r\n    const [address, setAddress] = useState('');\r\n    const [deliveryAvailable, setDeliveryAvailable] = useState(null);\r\n\r\n    const checkDeliveryAvailability = () => {\r\n        // Here you would implement your logic to check if delivery is available\r\n        // based on the address entered by the user\r\n        // For now, let's assume delivery is available if the address is not empty\r\n        const isDeliveryAvailable = address.trim() !== '';\r\n        setDeliveryAvailable(isDeliveryAvailable);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Check Delivery Availability</h2>\r\n            <input\r\n                type=\"text\"\r\n                value={address}\r\n                onChange={(e) => setAddress(e.target.value)}\r\n                placeholder=\"Enter your address\"\r\n            />\r\n            <button onClick={checkDeliveryAvailability}>Check Delivery</button>\r\n            {deliveryAvailable !== null && (\r\n                <p>\r\n                    Delivery {deliveryAvailable ? 'is available' : 'is not available'} to {address}.\r\n                </p>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DeliveryAvailability;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,oBAAoBA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACO,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAEhE,MAAMS,yBAAyB,GAAGA,CAAA,KAAM;IACpC;IACA;IACA;IACA,MAAMC,mBAAmB,GAAGL,OAAO,CAACM,IAAI,CAAC,CAAC,KAAK,EAAE;IACjDH,oBAAoB,CAACE,mBAAmB,CAAC;EAC7C,CAAC;EAED,oBACIR,OAAA;IAAAU,QAAA,gBACIV,OAAA;MAAAU,QAAA,EAAI;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpCd,OAAA;MACIe,IAAI,EAAC,MAAM;MACXC,KAAK,EAAEb,OAAQ;MACfc,QAAQ,EAAGC,CAAC,IAAKd,UAAU,CAACc,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC5CI,WAAW,EAAC;IAAoB;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC,eACFd,OAAA;MAAQqB,OAAO,EAAEd,yBAA0B;MAAAG,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAClET,iBAAiB,KAAK,IAAI,iBACvBL,OAAA;MAAAU,QAAA,GAAG,WACU,EAACL,iBAAiB,GAAG,cAAc,GAAG,kBAAkB,EAAC,MAAI,EAACF,OAAO,EAAC,GACnF;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAACZ,EAAA,CA7BQD,oBAAoB;AAAAqB,EAAA,GAApBrB,oBAAoB;AA+B7B,eAAeA,oBAAoB;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}