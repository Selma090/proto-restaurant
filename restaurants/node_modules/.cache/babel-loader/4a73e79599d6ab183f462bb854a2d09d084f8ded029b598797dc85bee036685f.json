{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\salma\\\\Documents\\\\Frontend\\\\restaurants\\\\src\\\\DeliveryAvailability.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DeliveryAvailability() {\n  _s();\n  const [address, setAddress] = useState('');\n  const [deliveryAvailable, setDeliveryAvailable] = useState(null);\n  const checkDeliveryAvailability = async () => {\n    try {\n      // Fetch restaurant addresses from MongoDB\n      const response = await axios.get('/api/restaurants');\n      const restaurants = response.data;\n\n      // Calculate distance from user's address to each restaurant\n      const distances = restaurants.map(restaurant => {\n        return calculateDistance(address, restaurant.address);\n      });\n\n      // Check if any restaurant is within delivery range (e.g., within 10 miles)\n      const withinDeliveryRange = distances.some(distance => distance <= 10); // Assume delivery range of 10 miles\n\n      setDeliveryAvailable(withinDeliveryRange);\n    } catch (error) {\n      console.error('Error checking delivery availability:', error);\n      setDeliveryAvailable(false); // Set to false in case of error\n    }\n  };\n  const calculateDistance = (address1, address2) => {\n    // Simple distance calculation based on string similarity\n    // This is a basic example and may not be accurate\n    let distance = 0;\n    for (let i = 0; i < address1.length; i++) {\n      if (address1[i] !== address2[i]) {\n        distance++;\n      }\n    }\n    return distance;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Check Delivery Availability\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: address,\n      onChange: e => setAddress(e.target.value),\n      placeholder: \"Enter your address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: checkDeliveryAvailability,\n      children: \"Check Delivery\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), deliveryAvailable !== null && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Delivery \", deliveryAvailable ? 'is available' : 'is not available', \" to \", address, \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n_s(DeliveryAvailability, \"aJYkroIMOlE7COSBpSkUfP5Wydg=\");\n_c = DeliveryAvailability;\nexport default DeliveryAvailability;\nvar _c;\n$RefreshReg$(_c, \"DeliveryAvailability\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","DeliveryAvailability","_s","address","setAddress","deliveryAvailable","setDeliveryAvailable","checkDeliveryAvailability","response","get","restaurants","data","distances","map","restaurant","calculateDistance","withinDeliveryRange","some","distance","error","console","address1","address2","i","length","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/salma/Documents/Frontend/restaurants/src/DeliveryAvailability.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction DeliveryAvailability() {\r\n    const [address, setAddress] = useState('');\r\n    const [deliveryAvailable, setDeliveryAvailable] = useState(null);\r\n\r\n    const checkDeliveryAvailability = async () => {\r\n        try {\r\n            // Fetch restaurant addresses from MongoDB\r\n            const response = await axios.get('/api/restaurants');\r\n            const restaurants = response.data;\r\n\r\n            // Calculate distance from user's address to each restaurant\r\n            const distances = restaurants.map(restaurant => {\r\n                return calculateDistance(address, restaurant.address);\r\n            });\r\n\r\n            // Check if any restaurant is within delivery range (e.g., within 10 miles)\r\n            const withinDeliveryRange = distances.some(distance => distance <= 10); // Assume delivery range of 10 miles\r\n\r\n            setDeliveryAvailable(withinDeliveryRange);\r\n        } catch (error) {\r\n            console.error('Error checking delivery availability:', error);\r\n            setDeliveryAvailable(false); // Set to false in case of error\r\n        }\r\n    };\r\n\r\n    const calculateDistance = (address1, address2) => {\r\n        // Simple distance calculation based on string similarity\r\n        // This is a basic example and may not be accurate\r\n        let distance = 0;\r\n        for (let i = 0; i < address1.length; i++) {\r\n            if (address1[i] !== address2[i]) {\r\n                distance++;\r\n            }\r\n        }\r\n        return distance;\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Check Delivery Availability</h2>\r\n            <input\r\n                type=\"text\"\r\n                value={address}\r\n                onChange={(e) => setAddress(e.target.value)}\r\n                placeholder=\"Enter your address\"\r\n            />\r\n            <button onClick={checkDeliveryAvailability}>Check Delivery</button>\r\n            {deliveryAvailable !== null && (\r\n                <p>\r\n                    Delivery {deliveryAvailable ? 'is available' : 'is not available'} to {address}.\r\n                </p>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DeliveryAvailability;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,oBAAoBA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACQ,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAEhE,MAAMU,yBAAyB,GAAG,MAAAA,CAAA,KAAY;IAC1C,IAAI;MACA;MACA,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,kBAAkB,CAAC;MACpD,MAAMC,WAAW,GAAGF,QAAQ,CAACG,IAAI;;MAEjC;MACA,MAAMC,SAAS,GAAGF,WAAW,CAACG,GAAG,CAACC,UAAU,IAAI;QAC5C,OAAOC,iBAAiB,CAACZ,OAAO,EAAEW,UAAU,CAACX,OAAO,CAAC;MACzD,CAAC,CAAC;;MAEF;MACA,MAAMa,mBAAmB,GAAGJ,SAAS,CAACK,IAAI,CAACC,QAAQ,IAAIA,QAAQ,IAAI,EAAE,CAAC,CAAC,CAAC;;MAExEZ,oBAAoB,CAACU,mBAAmB,CAAC;IAC7C,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAC7Db,oBAAoB,CAAC,KAAK,CAAC,CAAC,CAAC;IACjC;EACJ,CAAC;EAED,MAAMS,iBAAiB,GAAGA,CAACM,QAAQ,EAAEC,QAAQ,KAAK;IAC9C;IACA;IACA,IAAIJ,QAAQ,GAAG,CAAC;IAChB,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MACtC,IAAIF,QAAQ,CAACE,CAAC,CAAC,KAAKD,QAAQ,CAACC,CAAC,CAAC,EAAE;QAC7BL,QAAQ,EAAE;MACd;IACJ;IACA,OAAOA,QAAQ;EACnB,CAAC;EAED,oBACIlB,OAAA;IAAAyB,QAAA,gBACIzB,OAAA;MAAAyB,QAAA,EAAI;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpC7B,OAAA;MACI8B,IAAI,EAAC,MAAM;MACXC,KAAK,EAAE5B,OAAQ;MACf6B,QAAQ,EAAGC,CAAC,IAAK7B,UAAU,CAAC6B,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC5CI,WAAW,EAAC;IAAoB;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC,eACF7B,OAAA;MAAQoC,OAAO,EAAE7B,yBAA0B;MAAAkB,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAClExB,iBAAiB,KAAK,IAAI,iBACvBL,OAAA;MAAAyB,QAAA,GAAG,WACU,EAACpB,iBAAiB,GAAG,cAAc,GAAG,kBAAkB,EAAC,MAAI,EAACF,OAAO,EAAC,GACnF;IAAA;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAAC3B,EAAA,CAtDQD,oBAAoB;AAAAoC,EAAA,GAApBpC,oBAAoB;AAwD7B,eAAeA,oBAAoB;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}