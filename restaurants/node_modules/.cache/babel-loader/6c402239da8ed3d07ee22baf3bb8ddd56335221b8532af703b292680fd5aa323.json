{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\salma\\\\Documents\\\\Frontend\\\\restaurants\\\\src\\\\DeliveryAvailability.js\",\n  _s = $RefreshSig$();\n// DeliveryAvailability.js\n\nimport React, { useState } from 'react';\nimport geolib from 'geolib'; // For distance calculation\n\n// Sample data for restaurants\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst restaurants = [{\n  name: 'Restaurant A',\n  latitude: 40.7128,\n  longitude: -74.0060\n}, {\n  name: 'Restaurant B',\n  latitude: 34.0522,\n  longitude: -118.2437\n}\n// Add more restaurant data as needed\n];\n\n// Function to calculate distance between two coordinates\nconst calculateDistance = (userCoords, restaurantCoords) => {\n  return geolib.getDistance(userCoords, restaurantCoords);\n};\nfunction DeliveryAvailability() {\n  _s();\n  const [userAddress, setUserAddress] = useState('');\n  const [deliveryStatus, setDeliveryStatus] = useState('');\n  const handleCheckAvailability = () => {\n    // Logic to check delivery availability\n    // In this simplified example, we'll just log the status\n    const deliveryAvailable = restaurants.some(restaurant => {\n      const distance = calculateDistance(userAddress, {\n        latitude: restaurant.latitude,\n        longitude: restaurant.longitude\n      });\n      return distance < 5000; // Assume delivery range is 5km\n    });\n    setDeliveryStatus(deliveryAvailable ? 'Delivery available' : 'Delivery not available');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Check Delivery Availability\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Enter Your Address:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userAddress,\n        onChange: e => setUserAddress(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCheckAvailability,\n        children: \"Check Availability\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Status:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), \" \", deliveryStatus]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(DeliveryAvailability, \"N6eBPEVIhmVz+wH7NwcXFHhlffI=\");\n_c = DeliveryAvailability;\nexport default DeliveryAvailability;\nvar _c;\n$RefreshReg$(_c, \"DeliveryAvailability\");","map":{"version":3,"names":["React","useState","geolib","jsxDEV","_jsxDEV","restaurants","name","latitude","longitude","calculateDistance","userCoords","restaurantCoords","getDistance","DeliveryAvailability","_s","userAddress","setUserAddress","deliveryStatus","setDeliveryStatus","handleCheckAvailability","deliveryAvailable","some","restaurant","distance","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/salma/Documents/Frontend/restaurants/src/DeliveryAvailability.js"],"sourcesContent":["// DeliveryAvailability.js\r\n\r\nimport React, { useState } from 'react';\r\nimport geolib from 'geolib'; // For distance calculation\r\n\r\n// Sample data for restaurants\r\nconst restaurants = [\r\n  { name: 'Restaurant A', latitude: 40.7128, longitude: -74.0060 },\r\n  { name: 'Restaurant B', latitude: 34.0522, longitude: -118.2437 },\r\n  // Add more restaurant data as needed\r\n];\r\n\r\n// Function to calculate distance between two coordinates\r\nconst calculateDistance = (userCoords, restaurantCoords) => {\r\n  return geolib.getDistance(userCoords, restaurantCoords);\r\n};\r\n\r\nfunction DeliveryAvailability() {\r\n  const [userAddress, setUserAddress] = useState('');\r\n  const [deliveryStatus, setDeliveryStatus] = useState('');\r\n\r\n  const handleCheckAvailability = () => {\r\n    // Logic to check delivery availability\r\n    // In this simplified example, we'll just log the status\r\n    const deliveryAvailable = restaurants.some(restaurant => {\r\n      const distance = calculateDistance(userAddress, { latitude: restaurant.latitude, longitude: restaurant.longitude });\r\n      return distance < 5000; // Assume delivery range is 5km\r\n    });\r\n\r\n    setDeliveryStatus(deliveryAvailable ? 'Delivery available' : 'Delivery not available');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Check Delivery Availability</h2>\r\n      <div>\r\n        <label>Enter Your Address:</label>\r\n        <input type=\"text\" value={userAddress} onChange={(e) => setUserAddress(e.target.value)} />\r\n        <button onClick={handleCheckAvailability}>Check Availability</button>\r\n      </div>\r\n      <div>\r\n        <strong>Status:</strong> {deliveryStatus}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DeliveryAvailability;\r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,QAAQ,CAAC,CAAC;;AAE7B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,GAAG,CAClB;EAAEC,IAAI,EAAE,cAAc;EAAEC,QAAQ,EAAE,OAAO;EAAEC,SAAS,EAAE,CAAC;AAAQ,CAAC,EAChE;EAAEF,IAAI,EAAE,cAAc;EAAEC,QAAQ,EAAE,OAAO;EAAEC,SAAS,EAAE,CAAC;AAAS;AAChE;AAAA,CACD;;AAED;AACA,MAAMC,iBAAiB,GAAGA,CAACC,UAAU,EAAEC,gBAAgB,KAAK;EAC1D,OAAOT,MAAM,CAACU,WAAW,CAACF,UAAU,EAAEC,gBAAgB,CAAC;AACzD,CAAC;AAED,SAASE,oBAAoBA,CAAA,EAAG;EAAAC,EAAA;EAC9B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACgB,cAAc,EAAEC,iBAAiB,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAExD,MAAMkB,uBAAuB,GAAGA,CAAA,KAAM;IACpC;IACA;IACA,MAAMC,iBAAiB,GAAGf,WAAW,CAACgB,IAAI,CAACC,UAAU,IAAI;MACvD,MAAMC,QAAQ,GAAGd,iBAAiB,CAACM,WAAW,EAAE;QAAER,QAAQ,EAAEe,UAAU,CAACf,QAAQ;QAAEC,SAAS,EAAEc,UAAU,CAACd;MAAU,CAAC,CAAC;MACnH,OAAOe,QAAQ,GAAG,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC;IAEFL,iBAAiB,CAACE,iBAAiB,GAAG,oBAAoB,GAAG,wBAAwB,CAAC;EACxF,CAAC;EAED,oBACEhB,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MAAAoB,QAAA,EAAI;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpCxB,OAAA;MAAAoB,QAAA,gBACEpB,OAAA;QAAAoB,QAAA,EAAO;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAClCxB,OAAA;QAAOyB,IAAI,EAAC,MAAM;QAACC,KAAK,EAAEf,WAAY;QAACgB,QAAQ,EAAGC,CAAC,IAAKhB,cAAc,CAACgB,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC1FxB,OAAA;QAAQ8B,OAAO,EAAEf,uBAAwB;QAAAK,QAAA,EAAC;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClE,CAAC,eACNxB,OAAA;MAAAoB,QAAA,gBACEpB,OAAA;QAAAoB,QAAA,EAAQ;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,KAAC,EAACX,cAAc;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACd,EAAA,CA5BQD,oBAAoB;AAAAsB,EAAA,GAApBtB,oBAAoB;AA8B7B,eAAeA,oBAAoB;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}